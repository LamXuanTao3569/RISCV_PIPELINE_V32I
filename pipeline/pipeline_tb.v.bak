module tb;
    reg clk = 0, rst;
    
    // Instantiate Pipeline_Top
    Pipeline_top dut (
        .clk(clk),
        .rst(rst)
    );
    
    // Clock generation: 100ns period (50ns high, 50ns low)
    always begin
        #50 clk = ~clk;
    end
    
    // Reset and test sequence
    initial begin
        rst = 1; // Assert reset
        #200 rst = 0; // Deassert reset after 200ns
        #1500; // Run for 1500ns to complete pipeline execution
        
        // Check register values
        if (dut.Decode.rf.Register[1] == 32'h0000000a &&
            dut.Decode.rf.Register[2] == 32'h00000014 &&
            dut.Decode.rf.Register[3] == 32'h0000001e) begin
            $display("Test PASS: x1=%h, x2=%h, x3=%h",
                     dut.Decode.rf.Register[1],
                     dut.Decode.rf.Register[2],
                     dut.Decode.rf.Register[3]);
        end else begin
            $display("Test FAIL: x1=%h, x2=%h, x3=%h",
                     dut.Decode.rf.Register[1],
                     dut.Decode.rf.Register[2],
                     dut.Decode.rf.Register[3]);
        end
        $finish;
    end
    
    // Monitor signals
    initial begin
        $monitor("Time=%0t | InstrD=%h | ALU_ResultM=%h | x1=%h | x2=%h | x3=%h",
                 $time, dut.InstrD, dut.ALU_ResultM,
                 dut.Decode.rf.Register[1],
                 dut.Decode.rf.Register[2],
                 dut.Decode.rf.Register[3]);
    end
    
    // Dump waveform
    initial begin
        $dumpfile("dump.vcd");
        $dumpvars(0, tb);
    end
endmodule